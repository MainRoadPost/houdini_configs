# Dialog script for mrp::ggx_glass::1.0 automatically generated

{
    name	mrp::ggx_glass::1.0
    script	pbrspecular
    label	"MRP GGX Glass"

    outercode {
	"#ifdef VOP_SHADING"
	"#include \"shaderlayer.h\""
	"#endif"
    }

    code {
	"#ifdef VOP_SHADING"
	"vector $tnN = $isconnected_nN ? $nN : normalize(N);"
	"vector $tnNg = normalize(Ng);"
	"vector $tanu = $isconnected_utan ? $utan : normalize(dPds);"
	"#else"
	"vector $tnN = $isconnected_nN ? $nN : {0, 1, 0};"
	"vector $tnNg = $tnN;"
	"vector $tanu = $isconnected_utan ? $utan : {1, 0, 0};"
	"#endif"
	""
	"float $reflect_ = $reflect;"
	"float $refract_ = $refract;"
	"float $eta = 1.0/$ior;"
	"float $rx = $roughness*$roughness;"
	"float $ry = $rx;"
	""
	"vector $tanv;"
	""
	"if($aniso!=0){"
	"    $tanv = normalize(cross($tnN,$tanu));"
	"    "
	"    if ($aniso_angle != 0)"
	"    {"
	"        matrix3 $rot = ident();"
	"        rotate($rot, radians($aniso_angle), cross($tanu, $tanv));"
	"        $tanu *= $rot;"
	"        $tanv *= $rot;"
	"    }"
	"    "
	"    "
	"    if ($aniso < 0.0)"
	"        $ry *= (1.0+$aniso)*(1.0+$aniso);"
	"    else"
	"        $rx *= (1.0-($aniso))*(1.0-($aniso));"
	"} else {"
	"    matrix3 to_world = dihedral({0.0,0.0,1.0}, $tnN);"
	"    $tanu = {1,0,0} * to_world;"
	"    $tanv = {0,1,0} * to_world;"
	"}"
	""
	"$f = cvex_bsdf(\"mrp_ggx_glass_eval\", \"mrp_ggx_glass_sample\","
	"               \"label\", $reflectlabel + \" \" + $refractlabel,"
	"               \"reflectmask\", bouncemask($reflectlabel),"
	"               \"refractmask\", bouncemask($refractlabel),"
	"               \"reflect\", $reflect_,"
	"               \"refract\", $refract_,"
	"               \"nn\", $tnN,"
	"               \"ng\", $tnNg,"
	"               \"xg\", $tanu,"
	"               \"yg\", $tanv,"
	"               \"eta\", $eta,"
	"               \"roughnessx\", $rx,"
	"               \"roughnessy\", $ry,"
	"               \"dispersion\", (float)($dispersion)"
	"               );"
	"#ifdef VOP_SHADING"
	"ShaderLayer $temp;"
	"init_layer($temp);"
	"$temp.F = $f;"
	"$layer = $temp;"
	""
	"$f = $layer.F;"
	""
	"if($priority > 0)"
	"{"
	"    set_layer_export($layer, \"ndpriority\", (float)$priority);"
	"    set_layer_export($layer, \"ndior\", $ior);"
	"}"
	""
	"if($dispersion > 0)"
	"    set_layer_export($layer, \"dispersion\", $dispersion);"
	""
	"if(min($transcolor) < 1)"
	"{"
	"    set_layer_export($layer, \"absorption\", -log(max($transcolor, set(1e-5, 1e-5, 1e-5)))/$transdist);"
	"}"
	"#endif"
    }

    input	string	reflectlabel	"Reflect Label"
    input	string	refractlabel	"Refract Label"
    input	vector	nN	Normal
    input	vector	utan	"Tangent U"
    input	float	roughness	Roughness
    input	float	aniso	"Anisotropic Bias"
    input	float	aniso_angle	"Anisotropic Angle"
    input	float	ior	"Index Of Refraction"
    input	float	reflect	Reflect
    input	float	refract	Refract
    input	int	priority	"Surface Priority"
    input	float	dispersion	Dispersion
    input	vector	transcolor	"Transmittance Color"
    input	float	transdist	"At Distance"
    output	struct_ShaderLayer	layer	Layer
    output	bsdf	f	BSDF
    inputflags	reflectlabel	0
    inputflags	refractlabel	0
    inputflags	nN	0
    inputflags	utan	0
    inputflags	roughness	0
    inputflags	aniso	0
    inputflags	aniso_angle	0
    inputflags	ior	0
    inputflags	reflect	0
    inputflags	refract	0
    inputflags	priority	0
    inputflags	dispersion	0
    inputflags	transcolor	0
    inputflags	transdist	0
    signature	"Default Inputs"	default	{ string string vector vector float float float float float float int float vector float struct_ShaderLayer bsdf }

    outputoverrides	default
    {
	___begin	auto
			(0)
	___begin	auto
			(0)
    }

    help {
	""
    }

    parm {
        name    "reflectlabel"
        label   "Reflect Label"
        type    string
        default { "reflect" }
        menureplace {
            "diffuse"   "Diffuse"
            "specular"  "Specular"
            "reflect"   "Reflect"
            "refract"   "Refract"
        }
        range   { 0 1 }
    }
    parm {
        name    "refractlabel"
        label   "Refract Label"
        type    string
        default { "refract" }
        menureplace {
            "diffuse"   "Diffuse"
            "specular"  "Specular"
            "reflect"   "Reflect"
            "refract"   "Refract"
        }
        range   { 0 1 }
    }
    parm {
        name    "reflect"
        label   "Reflect"
        type    float
        default { "1" }
        range   { 0! 1! }
    }
    parm {
        name    "refract"
        label   "Refract"
        type    float
        default { "1" }
        range   { 0! 1! }
    }
    parm {
        name    "roughness"
        label   "Roughness"
        type    float
        default { "0.25" }
        range   { 0! 1 }
    }
    parm {
        name    "aniso"
        label   "Anisotropic Bias"
        type    float
        default { "0" }
        range   { -1 1 }
    }
    parm {
        name    "aniso_angle"
        label   "Anisotropic Angle"
        type    float
        default { "0" }
        range   { -90 90 }
    }
    parm {
        name    "ior"
        label   "Index Of Refraction"
        type    float
        default { "1.5" }
        range   { 0 10 }
    }
    parm {
        name    "priority"
        label   "Surface Priority"
        type    integer
        default { "0" }
        disablewhen "{ refract == 0 }"
        range   { 0 10 }
    }
    parm {
        name    "dispersion"
        label   "Dispersion"
        type    float
        default { "0" }
        disablewhen "{ refract == 0 }"
        range   { 0 1 }
    }
    parm {
        name    "transcolor"
        label   "Transmittance Color"
        type    color
        size    3
        default { "1" "1" "1" }
        disablewhen "{ refract == 0 }"
        range   { -1 1 }
    }
    parm {
        name    "transdist"
        label   "At Distance"
        type    float
        default { "0.1" }
        disablewhen "{ refract == 0 }"
        range   { 0 10 }
    }
}
